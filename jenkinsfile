pipeline {
    agent any

    stages {
        stage('*branch-name*') {
            steps {
                echo "${env.BRANCH_NAME}"
                sh '''
                    printenv
                    # Other commands in this stage
                '''
            }
        }

        stage('master') {
            when {
                branch "master"
            }
            steps {
                echo "${env.BRANCH_NAME}"
                echo "${BRANCH_NAME}"
                sh '''
                    printenv
                    /home/jenkins/.dotnet/tools/dotnet-gitversion /output buildserver
                '''
                script {
                    echo "This is Master branch Execution"
                    def props = readProperties file: 'gitversion.properties'
                    env.GitVersion_SemVer = props.GitVersion_SemVer
                    env.GitVersion_FullSemVer = props.GitVersion_FullSemVer
                    env.GitVersion_BranchName = props.GitVersion_BranchName
                    env.GitVersion_AssemblySemVer = props.GitVersion_AssemblySemVer
                    env.GitVersion_MajorMinorPatch = props.GitVersion_MajorMinorPatch
                    env.GitVersion_Sha = props.GitVersion_Sha
                    echo env.GitVersion_SemVer
                    echo env.GitVersion_MajorMinorPatch
                    echo env.GitVersion_FullSemVer
                }
            }
        }

        stage('major') {
            when {
                branch "major/*"
            }
            steps {
                echo "${env.BRANCH_NAME}"
                echo "${BRANCH_NAME}"
                sh '''
                    printenv
                    /var/jenkins_home/.dotnet/tools/dotnet-gitversion /output buildserver
                '''
                echo "This is Major branch Execution"
                script {
                    def props = readProperties file: 'gitversion.properties'
                    env.GitVersion_SemVer = props.GitVersion_SemVer
                    env.GitVersion_FullSemVer = props.GitVersion_FullSemVer
                    env.GitVersion_BranchName = props.GitVersion_BranchName
                    env.GitVersion_AssemblySemVer = props.GitVersion_AssemblySemVer
                    env.GitVersion_MajorMinorPatch = props.GitVersion_MajorMinorPatch
                    env.GitVersion_Sha = props.GitVersion_Sha
                    echo env.GitVersion_SemVer
                    echo env.GitVersion_MajorMinorPatch
                    echo env.GitVersion_FullSemVer
                }
            }
        }

        stage('hostfix') {
            when {
                branch "hotfix/*"
            }
            steps {
                echo "${env.BRANCH_NAME}"
                echo "${BRANCH_NAME}"
                sh '''
                    printenv
                    /var/jenkins_home/.dotnet/tools/dotnet-gitversion /output buildserver
                '''
                echo "This is bugfix branch Execution"
                script {
                    def props = readProperties file: 'gitversion.properties'
                    env.GitVersion_SemVer = props.GitVersion_SemVer
                    env.GitVersion_FullSemVer = props.GitVersion_FullSemVer
                    env.GitVersion_BranchName = props.GitVersion_BranchName
                    env.GitVersion_AssemblySemVer = props.GitVersion_AssemblySemVer
                    env.GitVersion_MajorMinorPatch = props.GitVersion_MajorMinorPatch
                    env.GitVersion_Sha = props.GitVersion_Sha
                    echo env.GitVersion_SemVer
                    echo env.GitVersion_MajorMinorPatch
                    echo env.GitVersion_FullSemVer
                }
            }
        }
    }
}
